--INTEGRADOR PARTE 1--

Generar el valor del KPI en cada mes, mostrando el resultado para todos los meses disponibles.
Todos los valores monetarios deben ser calculados en dolares usando el tipo de cambio promedio mensual.

KPIs:
-Ventas brutas, netas y margen
-Margen por categoria de producto
-ROI por categoria de producto. ROI = Valor promedio de inventario / ventas netas
-AOV (Average order value), valor promedio de la orden.

Select * from stg.product_master
Select * from stg.order_line_sale
Select * from stg.monthly_average_fx_rate
Select * from stg.inventory 

/*KPI mensual: VENTAS BRUTAS - NETAS - MARGEN*/

With ventas_usd as(
SELECT 
	 Round(CASE
		WHEN moneda='ARS' then ols.venta/mafr.cotizacion_usd_peso 
		WHEN moneda='EUR' then ols.venta/mafr.cotizacion_usd_eur 
		WHEN moneda='URU' then ols.venta/mafr.cotizacion_usd_uru
	END,2) AS venta_bruta_usd,
	  Trunc(CASE
		WHEN moneda='ARS' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_uru
	END,2) AS venta_neta_usd,
	cst.costo_promedio_usd,
	CAST (CAST(fecha AS text) AS date) AS fecha,
   CAST (CAST(mes AS text) AS date) AS mes
FROM stg.order_line_sale as ols
LEFT JOIN stg.monthly_average_fx_rate as mafr
ON date_trunc('month',ols.fecha)=date_trunc('month',mafr.mes)
LEFT JOIN stg.cost as cst
ON ols.producto=cst.codigo_producto
)
SELECT mes, sum(venta_bruta_usd)as Ventas_brutas_usd,sum(venta_neta_usd) as ventas_netas_usd, round(sum(venta_neta_usd-costo_promedio_usd),2) as margen_usd
FROM ventas_usd
GROUP BY mes

/*MARGEN POR CATEGORIA DE PRODUCTO*/

With tabla1 as(
SELECT *,  
	trunc(CASE
		WHEN moneda='ARS' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_uru
	END,2) AS venta_neta_usd
FROM stg.order_line_sale as ols
LEFT JOIN stg.monthly_average_fx_rate as mafr
ON extract(month from ols.fecha)=extract(month from mafr.mes)
LEFT JOIN stg.cost as cst
ON ols.producto=cst.codigo_producto
JOIN stg.product_master as pm
ON ols.producto=pm.codigo_producto
)
SELECT mes,categoria,round(sum(venta_neta_usd-costo_promedio_usd),2) as margen
FROM tabla1
GROUP BY mes,categoria

/*ROI POR CATEGORIA DE PRODUCTO*/

With tabla2 as(
SELECT *,  
	trunc(CASE
		WHEN moneda='ARS' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_uru
	END,2) AS venta_neta_usd
FROM stg.order_line_sale as ols
LEFT JOIN stg.monthly_average_fx_rate as mafr
ON extract(month from ols.fecha)=extract(month from mafr.mes)
LEFT JOIN stg.cost as cst
ON ols.producto=cst.codigo_producto
JOIN stg.product_master as pm
ON ols.producto=pm.codigo_producto
JOIN stg.inventory as inv
ON ols.producto=inv.sku
)
SELECT mes,categoria,round(avg((inicial+final)/2)*sum(costo_promedio_usd)/sum(venta_neta_usd),2) as ROI
FROM tabla2
GROUP BY mes, categoria

/*AOV - Valor promedio de la orden*/

With tabla3 as(
SELECT *,  
	trunc(CASE
		WHEN moneda='ARS' then (ols.venta)/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then (ols.venta)/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then (ols.venta)/mafr.cotizacion_usd_uru
	END,2) AS venta_bruta
FROM stg.order_line_sale as ols
LEFT JOIN stg.monthly_average_fx_rate as mafr
ON extract(month from ols.fecha)=extract(month from mafr.mes)
)
SELECT mes,round(sum(venta_bruta)/count(distinct orden),2) as AOV
FROM tabla3
GROUP BY mes


/*CONTABILIDAD*/
/*IMPUESTOS PAGADOS - TASA DE IMPUESTO - CREDITOS OTORGADOS*/

With tabla4 as(
SELECT *,  
	trunc(CASE
		WHEN moneda='ARS' then coalesce(ols.impuestos,0)/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then coalesce(ols.impuestos,0)/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then coalesce(ols.impuestos,0)/mafr.cotizacion_usd_uru
	END,2) AS impuestos_usd,
	trunc(CASE
		WHEN moneda='ARS' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then (ols.venta+coalesce(ols.descuento,0))/mafr.cotizacion_usd_uru
	END,2) AS venta_neta_usd,
	trunc(CASE
		WHEN moneda='ARS' then coalesce(ols.creditos,0)/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then coalesce(ols.creditos,0)/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then coalesce(ols.creditos,0)/mafr.cotizacion_usd_uru
	END,2) AS creditos_usd
FROM stg.order_line_sale as ols
LEFT JOIN stg.monthly_average_fx_rate as mafr
ON extract(month from ols.fecha)=extract(month from mafr.mes)
)
SELECT mes,
	sum(impuestos_usd) as Impuestos_pagados, 
	trunc(sum(impuestos_usd)/sum(venta_neta_usd),4) as Tasa_impuestos,
	count(creditos_usd)as creditos_otorgados,
	sum(creditos_usd)as creditos_otorgados_usd
	FROM tabla4
GROUP BY mes

/*Valor pagado final por order*/
With tabla3 as(
SELECT *,  
	trunc(CASE
		WHEN moneda='ARS' then (ols.venta+coalesce(ols.descuento,0)+coalesce(ols.impuestos,0)+coalesce(ols.creditos,0))/mafr.cotizacion_usd_peso
		WHEN moneda='EUR' then (ols.venta+coalesce(ols.descuento,0)+coalesce(ols.impuestos,0)+coalesce(ols.creditos,0))/mafr.cotizacion_usd_eur
		WHEN moneda='URU' then (ols.venta+coalesce(ols.descuento,0)+coalesce(ols.impuestos,0)+coalesce(ols.creditos,0))/mafr.cotizacion_usd_uru
	END,2) AS valor_pagado_final_usd
FROM stg.order_line_sale as ols
LEFT JOIN stg.monthly_average_fx_rate as mafr
ON extract(month from ols.fecha)=extract(month from mafr.mes)
)
SELECT mes,orden,sum(valor_pagado_final_usd) as valor_pagado_usd
FROM tabla3
GROUP BY mes,orden
ORDER BY mes


/*SUPPLY CHAIN*/
Costo de inventario promedio por tienda
Costo del stock de productos que no se vendieron por tienda
Cantidad y costo de devoluciones

/*Inventario promedio y stock no vendido*/

SELECT TO_CHAR (inv.fecha, 'YYYY-MM') AS año_mes,sm.nombre,
	   round(avg((inicial+final)/2),2) as inv_prom,
	   round(avg(((inicial+final)/2)*cst.costo_promedio_usd),2) as costo_inv_prom,
	   sum(final*cst.costo_promedio_usd) as costo_no_vendido
FROM stg.inventory as inv
JOIN stg.store_master as sm
ON inv.tienda=sm.codigo_tienda
JOIN stg.cost as cst
ON inv.sku=cst.codigo_producto
GROUP BY año_mes,sm.nombre
ORDER BY año_mes,sm.nombre

/*Cantidad y costo de devoluciones*/

CREATE TABLE stg.return_movements(
	orden_venta    VARCHAR(255)
	,envio         VARCHAR(255)
	,item          VARCHAR(255)
	,cantidad      INT
	,id_movimiento INT
	,desde         VARCHAR(255)
	,hasta         VARCHAR(255)
	,recibido_por  VARCHAR(255)
	,fecha         DATE)

INSERT INTO stg.return_movements
(orden_venta,envio,item,cantidad,id_movimiento,desde,hasta,recibido_por,fecha)
VALUES
('M999000006','R00001','p200010',1,180,'Cliente','Warehouse',null,2022-11-05),
('M999000006','R00001','p200010',1,181,'Warehouse','Productos Obsoletos',null,2022-11-05),
('M999000030','R00002','p200088',1,182,'Cliente','Warehouse',null,2022-10-20),
('M999000030','R00002','p200088',1,183,'Warehouse','Retorno a tienda',null,2022-10-20),
('M999000041','R00003','p100023',1,184,'Cliente','Warehouse',null,2022-11-14),
('M999000041','R00003','p100023',1,185,'Warehouse','Retorno a tienda',null,2022-11-15),
('M999000060','R00004','p200034',1,186,'Cliente','Warehouse',null,2022-12-01),
('M999000060','R00004','p200034',1,187,'Warehouse','Productos Obsoletos',null,2022-12-01)

SELECT to_char(rm.fecha, 'YYYY-MM') as mes,sum(cantidad) as devoluciones,sum(rm.cantidad*cst.costo_promedio_usd) as costo_devoluciones_usd
FROM stg.return_movements as rm
LEFT JOIN stg.cost as cst
ON rm.item=cst.codigo_producto
WHERE desde='Cliente'
GROUP BY mes

/*TIENDAS*/
Ratio de conversion. Cantidad de ordenes generadas / Cantidad de gente que entra

Select * from stg.super_store_count
Select * from stg.market_count

With conteo_tiendas2 as(
	With conteo_tiendas1 as(
				Select tienda,date(fecha::TEXT) as fecha,conteo 
				from stg.market_count
				UNION ALL 
				Select tienda,date(fecha::TEXT) as fecha,conteo 
				from stg.super_store_count
	)
	SELECT tienda,to_char(ct1.fecha, 'YYYY-MM') as mes, sum(coalesce(conteo,0)) as total_gente
	FROM conteo_tiendas1 as ct1
	GROUP BY tienda,mes
),
ordenes_tiendas as(
			SELECT tienda,to_char(fecha, 'YYYY-MM') as mes, count(distinct orden) as ordenes_tienda
			FROM stg.order_line_sale as ols
			Group By tienda,mes
)
SELECT ct2.mes,ct2.tienda, round(sum(coalesce(ot.ordenes_tienda,0))/sum(ct2.total_gente),10) as Ratio 
FROM conteo_tiendas2 as ct2
LEFT JOIN ordenes_tiendas as ot
ON (ct2.mes||'-'||ct2.tienda)=(ot.mes||'-'||ot.tienda)
GROUP BY ct2.mes,ct2.tienda 
ORDER BY mes


